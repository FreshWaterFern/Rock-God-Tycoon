<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
application_surface_draw_enable(0);
menu_set = "none";
message_str = "";
message_spr = 0;
message_pressed = 0;
message_over = 0;
message_id = 0;
img_ext[50]=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Only use at game start
instance_create(0,0,obj_ini_load);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Message_Show Handling
if ( menu_set == "popup" ){
if ( mouse_check_area_ui((res_x/2)-100,(res_y/2)+115-40,(res_x/2)+100,(res_y/2)+115+40) ){
message_over = 1;
if ( mouse_check_button_pressed(mb_left) ){message_pressed=1;}
if ( mouse_check_button_released(mb_left) &amp;&amp; message_pressed == 1 ){menu_set = "none";message_handle();io_clear();}}else{
message_over = 0;
if ( mouse_check_button_released(mb_left) ){message_pressed = 0;}
message_spr=global.sprite_map[? "Apply button\Apply button.png"];}

if ( message_pressed == 1 ){message_over = 0;
message_spr=global.sprite_map[? "Apply button\Apply button effect.png"];}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pre-load

resolution_update();

if ( g_fs != window_get_fullscreen() ){window_set_fullscreen(g_fs)}

if ( room == rm_main ){ // Main Menu
background_destroy(10);
img_ext[0]=background_add("Main Menu\Background.png",0,0);
img_ext[1]=background_add("Main Menu\Background.png",0,0);
img_ext[2]=background_add("Audio_Controls_Video\Background.png",0,0);
img_ext[3]=background_add("Main Menu\Paper Piece.png",0,0);
img_ext[4]=background_add("Options\Paper Piece.png",0,0);
img_ext[5]=background_add("Video Settings\Paper Piece.png",0,0);
draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Initialize
if ( file_exists("settings.ini") ){
ini_open("settings.ini");
g_fxaa = ini_read_real("data","fxaa",0);
g_vsync = ini_read_real("data","vsync",0);
g_fs = ini_read_real("data","fullscreen",0);
g_res = ini_read_real("data","resolution",0);
}else{
ini_open("settings.ini");
ini_write_real("data","fxaa",0);
ini_write_real("data","vsync",0);
ini_write_real("data","fullscreen",0);
ini_write_real("data","resolution",0);
g_fxaa = 0;g_vsync = 0;g_fs = 0;g_res = 0;}
ini_close();

res_count = 0;res_x=0;res_y=0;

display_reset(0,g_vsync);

resolution_update();

alarm[0]=2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Application With FXAA

// DISABLE ALPHABLEND BECAUSE SURFACES //
draw_enable_alphablend(0);
// GET OFFSET OF THE APPLICATION SURFACE FOR MANUAL DRAWING //
var offset = application_get_position();
// SET THE SHADER //
if(g_fxaa&gt;0){
shader_set(sha_fxaa);
var tex = surface_get_texture(application_surface);
shader_set_uniform_f(shader_get_uniform(sha_fxaa, "u_texel"), texture_get_texel_width(tex), texture_get_texel_height(tex));
shader_set_uniform_f(shader_get_uniform(sha_fxaa, "u_strength"),g_fxaa);
}
// DRAW THE APPLICATION SURFACE //
if ( !g_fs ){
draw_surface_stretched(application_surface,offset[0],offset[1],res_x,res_y);}else{
draw_surface_stretched(application_surface,0,0,display_get_width(),display_get_height());}
// RESET ALPHABLEND //
draw_enable_alphablend(1);
// RESET THE SHADER //
if(g_fxaa&gt;0){shader_reset();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Loading Screen
if ( room == rm_loading ){
draw_set_font(font_grave_36);draw_set_halign(fa_center);draw_set_valign(fa_middle);draw_set_color(c_white);
draw_text(960,540,"Loading...");}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Pop Up Messages
if ( menu_set == "popup" ){
// Crash prevention
if ( message_spr == 0 ){message_spr = global.sprite_map[? "Apply button\Apply button.png"];}
var gray = make_colour_rgb(200,200,200);var color = c_white;
draw_set_font(font_peax_20);draw_set_halign(fa_left);draw_set_valign(fa_middle);draw_set_color(c_white);draw_set_alpha(1);
draw_external_sprite(global.sprite_map[? "General\message_show.png"],0,view_xview[0]+(res_x/2),view_yview[0]+(res_y/2));
if ( message_over != 1 ){color = c_white}else{color = gray}if ( message_pressed == 1 ){color = c_white}
draw_external_sprite_ext(message_spr,0,view_xview[0]+(res_x/2),view_yview[0]+(res_y/2)+115,1,1,0,color,1);
draw_set_color(c_black);
draw_text(view_xview[0]+(res_x/2)-225,view_yview[0]+(res_y/2)-105,message_str);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI Scale Update
display_set_gui_size(view_wview[0],view_hview[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
