<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
direction=90
z=0
tilt=-0.5
angle = 0;
z = 128;
surface = surface_create(640,1280);
tex = sprite_get_texture(spr_neck,0);
tex1 = 0;tex2 = 0;
// initialize 3D
d3d_start();
d3d_set_hidden(false);
d3d_set_fog(false,c_black,480,1080);
d3d_set_lighting(false);
d3d_set_culling(false);
// interpolate textures
texture_set_interpolation(true);
z=10
zdirection=0
global.camx = x;
global.camy = y;
global.camsin = sin(direction*pi/180);
global.camcos = cos(direction*pi/180);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.camx = x;
global.camy = y;
global.camsin = sin(direction*pi/180);
global.camcos = cos(direction*pi/180);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set color and transparency
draw_set_alpha(1);
draw_set_color(c_white);
d3d_set_projection_ortho(0,0,view_wview[0],view_hview[0],0);
/*draw_sprite(spr_note,0,64,64);
draw_sprite(spr_note,0,128,256);
draw_sprite(spr_note,0,192,384);
draw_sprite(spr_note,0,256,512);*/
//draw_circle(view_wview[0]/2,960,16,false);
/*
if ( !surface_exists(surface) ){surface = surface_create(640,1280);}
surface_set_target(surface);

//Draw the addition sprite
draw_sprite(spr_note,0,64,64);
draw_sprite(spr_note,0,128,256);
draw_sprite(spr_note,0,192,384);
draw_sprite(spr_note,0,256,512);
draw_sprite(spr_note,0,320,640);

draw_sprite(spr_trans,0,0,0);

draw_set_blend_mode( bm_subtract );
draw_set_color( c_black ); //Set all colour channels to zero...
draw_set_alpha( 1 ); //...apart from the alpha channel.

//Set the alpha of the entire surface to 0 but keep the colour information
draw_rectangle( 0, 0, 640, 1280, false );

//Set the alpha of the area equal to sprite A to 1 but, again, don't interfere with the
//actual colours
draw_set_blend_mode( bm_add );
draw_sprite(spr_trans,0,0,0);

//Don't forget this bit!
draw_set_blend_mode( bm_normal );
surface_reset_target();

draw_set_blend_mode_ext(bm_one,bm_inv_src_alpha);
draw_surface(surface,960-320,-200);
draw_set_blend_mode( bm_normal );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set the projection 
x = 960;y = 1080;
d3d_set_projection(x,y,128,x+cos(direction*pi/180),y-sin(direction*pi/180),127.75,0,0,1);
var tex1 = sprite_duplicate(spr_neck);var tex2 = sprite_duplicate(spr_trans);
sprite_set_alpha_from_sprite(tex1,tex2);
d3d_draw_floor(990.15-80,-200,0,990.15+80,1080,0,sprite_get_texture(tex1,0),1,1);
sprite_delete(tex2);sprite_delete(tex1);

xt=0
yt=0
zt=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
