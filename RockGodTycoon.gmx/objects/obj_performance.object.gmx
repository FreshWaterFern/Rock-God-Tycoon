<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
direction=90
z=0
tilt=-0.5
angle = 0;
z = 128;
y_0 = -1920;y_1 = -640;y_2 = 640;y_3 = 1920;
note_test_y = 0;

tex = sprite_get_texture(spr_neck,0);
tex1 = 0;tex2 = 0;
zdirection=0
surface = surface_create(1920,1080);
// initialize 3D
d3d_set_hidden(false);
d3d_set_fog(false,c_black,480,1080);
d3d_set_lighting(false);
d3d_set_culling(false);
// interpolate textures
texture_set_interpolation(true);
global.camx = x;
global.camy = y;
global.camsin = sin(direction*pi/180);
global.camcos = cos(direction*pi/180);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.camx = x;
global.camy = y;
global.camsin = sin(direction*pi/180);
global.camcos = cos(direction*pi/180);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var spr = create_premultiplied_sprite(spr_note)
sprite_assign(spr_note,spr);
sprite_delete(spr);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set the projection 
x = 960;y = 1080;
draw_set_alpha(1);draw_set_color(c_white);draw_set_blend_mode(bm_normal);
if ( !surface_exists(surface) ){surface = surface_create(1920,1080);}
//view_surface_id[0]=surface;
surface_set_target(surface);
draw_clear_alpha(c_white,0);
d3d_end();
draw_sprite_ext(spr_trans,0,960,view_yview[0]+view_hview[0]+240,1,1,0,c_white,1);
d3d_start();
//d3d_set_projection_ortho(0,0,view_wview[0],view_hview[0],0);
d3d_set_projection(x,y,128,x+cos(direction*pi/180),y-sin(direction*pi/180),127.85,0,0,1);
draw_set_blend_mode_ext(bm_dest_alpha,bm_inv_src_alpha)
d3d_draw_floor(960-100,y_0-1280,-50,960+100,y_0,-50,tex,1,1);
d3d_draw_floor(960-100,y_1-1280,-50,960+100,y_1,-50,tex,1,1);
d3d_draw_floor(960-100,y_2-1280,-50,960+100,y_2,-50,tex,1,1);
d3d_draw_floor(960-100,y_3-1280,-50,960+100,y_3,-50,tex,1,1);
y_0+=4;y_1+=4;y_2+=4;y_3+=4;note_test_y+=4;
if ( y_0 &gt;= 3200 ){y_0 = -1920;}if ( y_1 &gt;= 3200 ){y_1 = -1920;}if ( y_2 &gt;= 3200 ){y_2 = -1920;}if ( y_3 &gt;= 3200 ){y_3 = -1920;}
with(obj_fret_note){
//var tex = sprite_get_texture(spr_note,0);
d3d_draw_wall(x-16,y+other.note_test_y,32,x+16,y+other.note_test_y,0,sprite_get_texture(spr_note,0),1,1);
}
/*d3d_end();
draw_sprite_ext(spr_note,0,960-64,64,1,1,0,c_white,1);
draw_sprite(spr_note,0,960-128,256);
draw_sprite(spr_note,0,960+64,384);
draw_sprite(spr_note,0,960+128,512);
draw_sprite(spr_note,0,960,640);*/
draw_set_blend_mode(bm_normal);
surface_reset_target();

view_surface_id[0]=application_surface;
draw_surface_ext(obj_performance.surface,view_xview[0],view_yview[0]+view_hview[0],1,-1,0,c_white,1);

xt=0
yt=0
zt=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
